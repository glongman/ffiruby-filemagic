#!/usr/bin/env ruby
require 'optparse'
require "rubygems"
require "ffi"


libname = FFI.map_library_name('magic')

module FFIFileMagic
  module Checker
    def self.check_lib(path)
      begin
        dylib = FFI::DynamicLibrary.open(path, FFI::DynamicLibrary::RTLD_LAZY | FFI::DynamicLibrary::RTLD_LOCAL)
      rescue LoadError
        return
      end
      puts "checking for needed methods in #{dylib.name}"
      result = true
      [:magic_open,   :magic_close,   :magic_file,
       :magic_buffer, :magic_error,   :magic_setflags,
       :magic_load,   :magic_compile, :magic_check,
       :magic_errno,  :magic_descriptor].each do |method|
         result &= begin
           print "\tmethod exists? #{method} ... "
           if dylib.find_symbol(method.to_s) 
             puts "yes"; true
           else
             puts "no"; false
           end
         end
      end
      if result
        puts "\t#{dylib.name} suitable? ... #{result ? 'yes' : 'no'}"; return dylib
      end
    end
  end
end
#sorry, no windows
if RUBY_PLATFORM =~ /mswin/
  raise <<END_MSWIN
\nInstall Failed
+--------------------------------------------------------------------+
| This gem is for use only on Linux, BSD, OS X, and similar systems. |
+--------------------------------------------------------------------+
END_MSWIN
end

op = nil
ARGV.options do |op|
  op.def_option('--with-magic-lib=ARBITRARY', '-l', 'arg') do |arg|
    puts arg
    $user_lib_path = File.join(arg, libname) if arg
  end
end
ARGV.options.parse!

dylib = nil
if $user_lib_path
  #user supplied
  dylib = FFIFileMagic::Checker.check_lib($user_lib_path)
  puts "No suitable magic library found at #{$user_lib_path}" unless dylib
end


unless dylib || $user_lib_path
  # no fuss, no muss?
  dylib = default_dylib = FFIFileMagic::Checker.check_lib('magic')
end

unless dylib || $user_lib_path
  #check some usual suspects
  paths = %w{ /lib/ /usr/lib/ /usr/local/lib/ /opt/local/lib/}
  found_path = nil
  paths.uniq.each do |path|
     full_path = path + libname
  	 if File.exist? full_path
  	   begin
  	     break if (dylib = FFIFileMagic::Checker.check_lib(full_path))
	     rescue LoadError; end
     end
  end
end

unless dylib
  raise <<END_FAIL
\nInstall Failed
+----------------------------------------------------------------------------+
| Could not find a suitable magic library.                                   |
|                                                                            |
| OSX - use macports               http://www.macports.org/                  |
|     > port install file                                                    |
|                                                                            |
| Others - build file from source - ftp://ftp.astron.com/pub/file/           |
|                                                                            |
| Or:                                                                        |
| you can run this tool with an option to force the location of the library: |
|                                                                            |
| > ffi_file_magic_setup --with-magic-lib=/opt/local/lib                     |
|                                                                            |
+----------------------------------------------------------------------------+
END_FAIL
end

template =<<END_TEMPLATE
class FFIFileMagic
  module Native
    module LoadLibrary
      def self.included(base)
        base.class_eval do
          begin
            # the ffi_file_magic_setup tool once found this library as suitable
            ffi_lib '#{dylib.name}'
          rescue LoadError
              puts <<END_LOAD_ERROR
+--------------------------------------------+
| I was unable to load the magic library.    |
|                                            |
| Try running the ffi_file_magic_setup tool  |
+--------------------------------------------+            
END_LOAD_ERROR
            raise
          end
        end
      end
    end
  end 
end
END_TEMPLATE

if dylib
  print "writing path #{dylib.name} into lib/ffi_file_magic/load_library.rb ...."
  load_library = File.expand_path(File.dirname(__FILE__) + '/../lib/ffi_file_magic/load_library.rb')
  File.open(load_library, 'w') do |file|
    file.write template
  end
  puts "success"
end

puts "\n Finished."










